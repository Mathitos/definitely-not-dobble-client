{"version":3,"sources":["pages/LoginForm/index.tsx","utils/socket/index.ts","utils/datetime/index.ts","models/GameState.ts","components/Chat/index.tsx","components/DobbleGameCard/index.tsx","pages/GameRoom/index.tsx","Root.tsx","index.tsx"],"names":["LoginForm","useState","name","room","state","setState","history","useHistory","onSubmit","event","preventDefault","push","pathname","search","URLSearchParams","toString","className","value","onChange","target","type","socket","Socket","params","user_token","connect","channelName","userName","channel","disconnect","Promise","resolve","reject","join","receive","resp","console","log","message","callback","on","payload","currentdate","Date","getHours","getMinutes","getSeconds","isServer","user","id","isSameUser","user1","user2","filter","player","playerServer","find","card","RenderChatMessage","user_name","text","time","Chat","messages","onNewMessage","inputValue","setInputValue","useEffect","messageContainer","document","getElementById","scrollTop","scrollHeight","e","map","msg","colors","getNumberColor","number","getNumberHeight","getFontSize","small","Math","floor","random","getNumberStyle","color","fontSize","transform","fontWeight","DobbleGameCard","onGuess","cn","key","style","onClick","tabIndex","disabled","OtherPlayersInfo","players","GameRoom","location","get","chatRoom","PhoenixSocket","userId","setUserId","gameState","setGameState","chatHistory","setChatHistory","chatHistoryRef","useRef","current","handleMessageReceived","TimeHelper","updateChatHistory","handleGameStateUpdateReceived","newGameState","game_state","onError","then","userCard","GameStateHelper","serverCard","otherPlayers","guess","response","newMsg","Root","exact","path","component","ReactDOM"],"mappings":"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","file":"static/js/main.73ef9e7e.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport './login-form.scss'\n\ninterface LoginInfo {\n  name: string\n  room: string\n}\n\nconst LoginForm: React.FC = () => {\n  const [state, setState] = useState<LoginInfo>({ name: '', room: '' })\n  const history = useHistory()\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    if (state.name && state.room) {\n      history.push({\n        pathname: '/dobble',\n        search: '?' + new URLSearchParams({ name: state.name, room: state.room }).toString(),\n      })\n    }\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleFormSubmit} className=\"login-form\">\n        <label>\n          <span>Seu Nome:</span>\n          <input\n            value={state.name}\n            onChange={({ target: { value } }) => {\n              setState({ ...state, name: value })\n            }}\n          />{' '}\n        </label>\n        <label>\n          <span>Nome da Sala:</span>\n          <input\n            value={state.room}\n            onChange={({ target: { value } }) => {\n              setState({ ...state, room: value })\n            }}\n          />\n        </label>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginForm\n","import { Socket } from 'phoenix'\nimport { GameState } from '../../models/GameState'\n\nexport type Channel = {\n  join: () => Push<'join'>\n  on: <T extends keyof ReceivedMessage>(\n    ReceivedMessage: T,\n    callback: (payload: ReceivedMessage[T]) => void,\n  ) => void\n  push: <T extends keyof SendMessage>(message: T, payload: SendMessage[T]) => Push<T>\n  disconnect: () => void\n  onError: (cb: () => void) => void\n  leave: () => void\n}\n\ninterface Push<T extends keyof ResponseMessage> {\n  resend: (timeout: number) => void\n  send: () => void\n  receive: {\n    (status: 'ok', callback: (payload: ResponseMessage[T]) => void): Push<T>\n    (status: 'error', callback: (payload: unknown) => void): Push<T>\n    (status: 'timeout', callback: (payload: unknown) => void): Push<T>\n  }\n}\n\nexport type SendMessage = {\n  join: never\n  message: { text: string }\n  get_game_state: null\n  guess: { number: number }\n  life_signal: null\n}\n\nexport type ResponseMessage = {\n  join: { id: number }\n  message: void\n  get_game_state: GameState\n  guess: { response: 'right' | 'wrong' }\n  life_signal: never\n}\n\nexport type ReceivedMessage = {\n  message: { user_name: string; text: string }\n  game_state_update: { game_state: GameState }\n}\n\nconst url =\n  process.env.NODE_ENV !== 'production' ? 'localhost:4000' : 'definitely-not-dobble.herokuapp.com'\n\nconst socket = new Socket(`wss://${url}/socket`, {\n  params: { user_token: 'user_token_test' },\n})\nsocket.connect()\n\nconst connectToChannel = (channelName: string, userName: string): Channel =>\n  socket.channel(channelName, { name: userName }) as any\n\nconst join = (channel: Channel): Promise<ResponseMessage['join']> =>\n  new Promise(\n    (resolve: (payload: ResponseMessage['join']) => void, reject?: (payload: unknown) => void) => {\n      channel\n        .join()\n        .receive('ok', (resp) => {\n          resolve(resp)\n        })\n        .receive('error', (resp) => {\n          reject ? reject(resp) : console.log('Unable to join on channel', resp)\n        })\n        .receive('timeout', (resp) =>\n          reject ? reject(resp) : console.log('Networking issue. Still waiting...'),\n        )\n    },\n  )\n\nconst disconect = (channel: Channel): void => channel.disconnect()\n\nconst listenTo = <T extends keyof ReceivedMessage>(\n  channel: Channel,\n  message: T,\n  callback: (payload: ReceivedMessage[T]) => void,\n) => channel.on(message, callback)\n\nconst send = <T extends keyof SendMessage>(\n  channel: Channel,\n  message: T,\n  payload: SendMessage[T],\n): Promise<ResponseMessage[T]> =>\n  new Promise(\n    (resolve: (payload: ResponseMessage[T]) => void, reject: (payload: unknown) => void) => {\n      channel\n        .push(message, payload)\n        .receive('ok', resolve)\n        .receive('error', reject)\n    },\n  )\n\nexport default {\n  connectToChannel,\n  disconect,\n  join,\n  listenTo,\n  send,\n}\n","const getCurrentTime = (): string => {\n  var currentdate = new Date()\n  return `${currentdate.getHours()}: ${currentdate.getMinutes()}: ${currentdate.getSeconds()}`\n}\n\nexport default {\n  getCurrentTime,\n}\n","export type GameState = Player[]\n\ninterface User {\n  id: number\n  name: string\n}\n\nexport interface Player {\n  user: User\n  card: number[]\n  cooldown: boolean\n}\n\nconst isServer = (user: User): boolean => user.id === 0\n\nconst isSameUser = (user1: User, user2: User) => user1.id === user2.id\n\nconst getServerCard = (state: GameState): number[] | null => {\n  const playerServer = state.find((player) => isServer(player.user))\n  return playerServer?.card || null\n}\n\nconst getUserCard = (user: User, state: GameState): number[] | null => {\n  const player = state.find((player) => isSameUser(player.user, user))\n  return player?.card || null\n}\n\nconst getOtherPlayersCard = (user: User, state: GameState): Player[] =>\n  state.filter((player) => !isSameUser(player.user, user) && !isServer(player.user))\n\nexport default {\n  getOtherPlayersCard,\n  getServerCard,\n  getUserCard,\n}\n","import React, { useState, useEffect } from \"react\";\nimport { ChatLine } from \"../../models/Chat\";\n\nimport \"./chat.scss\";\n\nconst Chat: React.FC<{\n  messages: ChatLine[];\n  onNewMessage: (msg: string) => void;\n}> = ({ messages, onNewMessage }) => {\n  const [inputValue, setInputValue] = useState<string>(\"\");\n\n  useEffect(() => {\n    const messageContainer = document.getElementById(\"messages-container\");\n    if (messageContainer) {\n      messageContainer.scrollTop = messageContainer.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        setInputValue(\"\");\n        onNewMessage(inputValue);\n      }}\n      className=\"chat__container\"\n    >\n      <div id=\"messages-container\" className=\"chat__messages-container\">\n        {messages.map(msg => (\n          <RenderChatMessage {...msg} />\n        ))}\n      </div>\n      <div className=\"chat__input-area\">\n        <input\n          value={inputValue}\n          onChange={({ target: { value } }) => setInputValue(value)}\n        />\n        <button type=\"submit\">Send</button>\n      </div>\n    </form>\n  );\n};\n\nconst RenderChatMessage: React.FC<ChatLine> = ({ user_name, text, time }) => (\n  <span className=\"chat__message\">\n    <span className=\"chat__message-label\">{`[${time}]: ${user_name}:`}</span>{\" \"}\n    <span>{`${text}`}</span>\n  </span>\n);\n\nexport default Chat;\n","import React from 'react'\nimport cn from 'classnames'\n\nimport './dobble-game-card.scss'\n\nconst DobbleGameCard: React.FC<{\n  card: number[]\n  onGuess?: (guess: number) => void\n  small?: boolean\n}> = ({ card, onGuess, small = false }) => (\n  <div className={cn('dobble-game-card__container', small && 'dobble-game-card__container--small')}>\n    {card.map((number) => (\n      <button\n        key={number}\n        className=\"dobble-game-card__button\"\n        style={getNumberStyle(number, small)}\n        onClick={() => onGuess && onGuess(number)}\n        tabIndex={onGuess ? 0 : -1}\n        disabled={!onGuess}\n      >\n        {number}\n      </button>\n    ))}\n  </div>\n)\n\nconst colors: string[] = [\n  'Lavender',\n  'YellowGreen',\n  'Teal',\n  'SaddleBrown',\n  'Salmon',\n  'RebeccaPurple',\n  'Red',\n  'Magenta',\n]\n\nconst getNumberColor = (number: number): string => colors[number % 8]\n\nconst getNumberRotation = (): string => `rotate(${90 - Math.floor(Math.random() * 180)}deg)`\n\nconst getNumberHeight = (number: number): 'normal' | 'bold' =>\n  number % 2 === 0 ? 'normal' : 'bold'\n\nconst getFontSize = (small: boolean): string =>\n  `${small ? 7 + Math.floor(Math.random() * 3) : 14 + Math.floor(Math.random() * 10)}px`\n\nconst getNumberStyle = (number: number, small: boolean): React.CSSProperties => ({\n  color: getNumberColor(number),\n  fontSize: getFontSize(small),\n  transform: getNumberRotation(),\n  fontWeight: getNumberHeight(number),\n})\n\nexport default DobbleGameCard\n","import React, { useEffect, useState, useRef } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport PhoenixSocket, { Channel, ReceivedMessage } from '../../utils/socket'\nimport TimeHelper from '../../utils/datetime'\nimport GameStateHelper, { GameState, Player } from '../../models/GameState'\nimport { ChatLine } from '../../models/Chat'\nimport Chat from '../../components/Chat'\nimport DobbleGameCard from '../../components/DobbleGameCard'\n\nimport './game-room.scss'\n\nconst GameRoom: React.FC<RouteComponentProps> = ({ location: { search } }) => {\n  const params = new URLSearchParams(search)\n  const name = params.get('name') || 'Anonymous'\n  const chatRoom = params.get('room')\n\n  const [channel] = useState<Channel>(PhoenixSocket.connectToChannel(`room:${chatRoom}`, name))\n  const [userId, setUserId] = useState<number | null>(null)\n  const [gameState, setGameState] = useState<GameState>([])\n\n  const [chatHistory, setChatHistory] = useState<ChatLine[]>([])\n  const chatHistoryRef = useRef(chatHistory)\n\n  useEffect(() => {\n    chatHistoryRef.current = chatHistory\n  }, [chatHistory])\n\n  const updateChatHistory = (user_name: string, text: string): void => {\n    setChatHistory([\n      ...chatHistoryRef.current,\n      { user_name, text, time: TimeHelper.getCurrentTime() },\n    ])\n  }\n\n  const handleMessageReceived = ({ user_name, text }: ReceivedMessage['message']): void => {\n    updateChatHistory(user_name, text)\n  }\n\n  const handleGameStateUpdateReceived = ({\n    game_state: newGameState,\n  }: ReceivedMessage['game_state_update']): void => {\n    console.log(newGameState)\n    setGameState(newGameState)\n  }\n\n  useEffect(() => {\n    PhoenixSocket.listenTo(channel, 'message', handleMessageReceived)\n    PhoenixSocket.listenTo(channel, 'game_state_update', handleGameStateUpdateReceived)\n    channel.onError(() => {\n      console.log('there was an error with the connection!')\n    })\n\n    PhoenixSocket.join(channel).then(({ id }) => setUserId(id))\n\n    return () => {\n      PhoenixSocket.disconect(channel)\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  const sendMessage = (newMsg: string): void => {\n    PhoenixSocket.send(channel, 'message', {\n      text: newMsg,\n    })\n  }\n\n  const handleGuess = (guess: number): void => {\n    PhoenixSocket.send(channel, 'guess', { number: guess }).then(({ response }) => {\n      if (response === 'right') {\n        console.log('topêêê')\n      } else {\n        console.log('vc é meio burro né?')\n      }\n    })\n  }\n\n  const userCard = userId && GameStateHelper.getUserCard({ id: userId, name }, gameState)\n  const serverCard = GameStateHelper.getServerCard(gameState)\n  const otherPlayers = userId\n    ? GameStateHelper.getOtherPlayersCard({ id: userId, name }, gameState)\n    : []\n  return (\n    <div className=\"game-room\">\n      <OtherPlayersInfo players={otherPlayers} />\n      {userCard && serverCard && (\n        <>\n          <DobbleGameCard card={serverCard} onGuess={handleGuess} />\n          <DobbleGameCard card={userCard} />\n        </>\n      )}\n      <div className=\"game-room__chat\">\n        <Chat messages={chatHistory} onNewMessage={sendMessage} />\n      </div>\n    </div>\n  )\n}\n\nconst OtherPlayersInfo: React.FC<{ players: Player[] }> = ({ players }) => (\n  <div className=\"game-room__other-players-info\">\n    {players.map((player) => (\n      <div className=\"game-room__other-player\" key={player.user.id}>\n        <DobbleGameCard card={player.card} small />\n        <span>{player.user.name}</span>\n      </div>\n    ))}\n  </div>\n)\n\nexport default GameRoom\n","import * as React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport LoginForm from './pages/LoginForm'\nimport GameRoom from './pages/GameRoom'\n\nconst Root: React.FC = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path={'/'} component={LoginForm} />\n      <Route path={'/dobble'} component={GameRoom} />\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default Root\n","import \"phoenix_html\";\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport Root from \"./Root\";\n\nimport \"./style-reset.scss\";\n\nReactDOM.render(\n  <Root />,\n  document.getElementById(\"definitely-not-dobble-root\")\n);\n"],"sourceRoot":""}